/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include "W3SIncs/War3Source_Interface"

public Plugin:myinfo = 
{
	name = "War3Source Addon - Favorite Race",
	author = "necavi",
	description = "Allows players to select a list of favorite races.",
	version = "1.0",
	url = "http://necavi.org/"
}
new Handle:g_hDatabase = INVALID_HANDLE;
new Handle:g_hFavRaces[MAXPLAYERS + 2] = {INVALID_HANDLE, ...};
new g_iPlayerID[MAXPLAYERS + 2] = {-1, ...};
public OnPluginStart()
{
	RegConsoleCmd("sm_addfavrace", ConCmd_AddFavRace, "Adds your current race to your favorite race list.", FCVAR_PLUGIN);
	RegConsoleCmd("sm_mngfavraces", ConCmd_MngFavRaces, "Opens the menu to manage your favorite race list.", FCVAR_PLUGIN);
	RegConsoleCmd("sm_favraces", ConCmd_FavRaces, "Views your favorite race list.", FCVAR_PLUGIN);
}
public OnClientConnected(client)
{
	if(g_hFavRaces[client] != INVALID_HANDLE)
	{
		CloseHandle(g_hFavRaces[client]);
	}
	g_hFavRaces[client] = CreateArray(16);
	g_iPlayerID[client] = -1;
}
public OnClientAuthorized(client, const String:auth[])
{
	if(!IsFakeClient(client))
	{
		new String:query[256];
		Format(query, sizeof(query), "SELECT `player_id` FROM `war3_favrace_players` WHERE `player_steam` = '%s';", auth);
		SQL_TQuery(g_hDatabase, SQLCallback_PlayerJoin, query, GetClientUserId(client));
	}
}
public Action:ConCmd_AddFavRace(client, args)
{
	new String:shortname[16];
	new race = War3_GetRace(client);
	War3_GetRaceShortname(race, shortname, sizeof(shortname));
	new String:name[64];
	War3_GetRaceName(race, name, sizeof(name));
	if(AddFavRace(client, shortname))
	{
		War3_ChatMessage(client, "You have added %s to your favorites list.", name);
	}
	else
	{
		War3_ChatMessage(client, "%s is already on your favorites list.", name);
	}
	return Plugin_Handled;
}
public Action:ConCmd_MngFavRaces(client, args)
{
	ShowFavRaceManagementMenu(client);
	return Plugin_Handled;
}
public Action:ConCmd_FavRaces(client, args)
{
	ShowFavRacesMenu(client);
	return Plugin_Handled;
}
ShowFavRaceManagementMenu(client)
{
	new Handle:menu = CreateMenu(MenuHandler_ManageFavRaces);
	SetMenuTitle(menu, "[W3S] Manage Favorite Races");
	AddMenuItem(menu, "add", "Add your current race to your favorites");
	AddMenuItem(menu, "rmcurrent", "Remove your current race from your favorites");
	AddMenuItem(menu, "rm", "Choose which race to remove from your favorites");
	AddMenuItem(menu, "view", "View your current favorites");
	DisplayMenu(menu, client, MENU_TIME_FOREVER);
}
bool:AddFavRace(client, const String:race[])
{
	if(FindStringInArray(g_hFavRaces[client], race) > -1)
	{
		return false;
	}
	PushArrayString(g_hFavRaces[client], race);
	if(g_iPlayerID[client] > -1)
	{
		new String:query[128];
		Format(query, sizeof(query), "INSERT INTO `war3_favrace_races`(`player_id`, `race_name`) VALUES('%d', '%s');", g_iPlayerID[client], race);
		SQL_TQuery(g_hDatabase, SQLCallback_Void, query, sizeof(query));
	}	
	return true;
}
bool:RemoveFavRace(client, const String:race[])
{
	new index = FindStringInArray(g_hFavRaces[client], race);
	if(index > -1)
	{
		
		RemoveFromArray(g_hFavRaces[client], index);
		new String:query[128];
		Format(query, sizeof(query), "DELETE FROM `war3_favrace_races` WHERE `player_id` = '%d' AND `race_name` = '%s';", g_iPlayerID[client], race);
		SQL_TQuery(g_hDatabase, SQLCallback_Void, query);
		return true;
	}
	return false;
}
ShowFavRacesMenu(client)
{
	new Handle:menu = CreateMenu(MenuHandler_ShowFavRaces);
	SetMenuTitle(menu, "[W3S] Favorite Races");
	PopulateFavRaceMenu(client, menu);
	DisplayMenu(menu, client, MENU_TIME_FOREVER);
}
PopulateFavRaceMenu(client, Handle:menu)
{
	new size = GetArraySize(g_hFavRaces[client]);
	if(size == 0)
	{
		AddMenuItem(menu, "", "You have no favorite races.", ITEMDRAW_DISABLED);
	}
	else
	{
		new String:name[64];
		new String:shortname[16];
		new String:id[8];
		for(new i = 0; i < size; i++)
		{
			GetArrayString(g_hFavRaces[client], i, shortname, sizeof(shortname));
			new race = War3_GetRaceIDByShortname(shortname);
			War3_GetRaceName(race, name, sizeof(name));
			IntToString(race, id, sizeof(id));
			AddMenuItem(menu, id, name);
		}
	}
}
public MenuHandler_ManageFavRaces(Handle:menu, MenuAction:action, client, item)
{
	switch(action)
	{
		case MenuAction_End:
		{
			CloseHandle(menu);
		}
		case MenuAction_Select:
		{
			new String:type[16];
			GetMenuItem(menu, item, type, sizeof(type));
			if(strcmp(type, "add") == 0)
			{
				new String:shortname[16];
				new race = War3_GetRace(client);
				War3_GetRaceShortname(race, shortname, sizeof(shortname));
				new String:name[64];
				War3_GetRaceName(race, name, sizeof(name));
				if(AddFavRace(client, shortname))
				{
					War3_ChatMessage(client, "You have added %s to your favorites list.", name);
				}
				else
				{
					War3_ChatMessage(client, "%s is already on your favorites list.", name);
				}
			}
			else if(strcmp(type, "rmcurrent") == 0)
			{
				new String:shortname[16];
				new race = War3_GetRace(client);
				War3_GetRaceShortname(race, shortname, sizeof(shortname));
				new String:name[64];
				War3_GetRaceName(race, name, sizeof(name));
				if(RemoveFavRace(client, shortname))
				{
					War3_ChatMessage(client, "You have removed %s from your favorites list.", name);
				}
				else
				{
					War3_ChatMessage(client, "%s is not on your favorites list.", name);
				}
			}
			else if(strcmp(type, "rm") == 0)
			{
				ShowRemoveRaceMenu(client);
			}
			else if(strcmp(type, "view") == 0)
			{
				ShowFavRacesMenu(client);
			}
		}
	}
}
ShowRemoveRaceMenu(client)
{
	new Handle:menu = CreateMenu(MenuHandler_RemoveRaces);
	SetMenuTitle(menu, "[W3S] Choose a race to remove");
	PopulateFavRaceMenu(client, menu);
	DisplayMenu(menu, client, MENU_TIME_FOREVER);
}
public MenuHandler_RemoveRaces(Handle:menu, MenuAction:action, client, item) 
{
	switch(action)
	{
		case MenuAction_End:
		{
			CloseHandle(menu);
		}
		case MenuAction_Select:
		{
			new String:id[8];
			GetMenuItem(menu, item, id, sizeof(id));
			new race = StringToInt(id);
			new String:shortname[16];
			War3_GetRaceShortname(race, shortname, sizeof(shortname));
			new String:name[64];
			War3_GetRaceName(race, name, sizeof(name));
			if(RemoveFavRace(client, shortname))
			{
				War3_ChatMessage(client, "You have removed %s from your favorites list.", name);
			}
			else
			{
				War3_ChatMessage(client, "%s is not on your favorites list.", name);
			}
			ShowRemoveRaceMenu(client);
		}
	}
}
public MenuHandler_ShowFavRaces(Handle:menu, MenuAction:action, client, item) 
{
	switch(action)
	{
		case MenuAction_End:
		{
			CloseHandle(menu);
		}
		case MenuAction_Select:
		{
			new String:id[8];
			GetMenuItem(menu, item, id, sizeof(id));
			new race = StringToInt(id);
			if(CanSelectRace(client, race))
			{
				if(IsPlayerAlive(client))
				{
					War3_SetRace(client, race);
				}
				else
				{
					W3SetPendingRace(client, race);
					new String:name[32];
					War3_GetRaceName(race, name, sizeof(name));
					War3_ChatMessage(client,"You will be %s after death or spawn", name);
				}
			}
		}
	}
}
public SQLCallback_Void(Handle:db, Handle:hndl, const String:error[], any:userid)
{
	if(hndl == INVALID_HANDLE)
	{
		LogError("Error looking up player. %s.", error);
	}
}
public SQLCallback_PlayerJoin(Handle:db, Handle:hndl, const String:error[], any:userid)
{
	if(hndl == INVALID_HANDLE)
	{
		LogError("Error looking up player. %s.", error);
	}
	else
	{
		new client = GetClientOfUserId(userid);
		if(client == 0)
		{
			return;
		}
		if(SQL_GetRowCount(hndl) > 0) 
		{
			SQL_FetchRow(hndl);
			g_iPlayerID[client] = SQL_FetchInt(hndl, 0);
			new String:query[256];
			Format(query, sizeof(query), "SELECT `race_name` FROM `war3_favrace_races` WHERE `player_id` = '%d';", g_iPlayerID[client]);
			SQL_TQuery(g_hDatabase, SQLCallback_LookupPlayer, query, GetClientUserId(client));
		} 
		else 
		{
			new String:query[128];
			Format(query, sizeof(query), "SELECT max(`player_id`) FROM `war3_favrace_players`;");
			SQL_TQuery(g_hDatabase, SQLCallback_GetNextID, query, GetClientUserId(client));
		}
	}
}
public SQLCallback_GetNextID(Handle:db, Handle:hndl, const String:error[], any:userid)
{
	if(hndl == INVALID_HANDLE)
	{
		LogError("Error getting next insert id. %s.", error);
	}
	else
	{
		new client = GetClientOfUserId(userid);
		if(client == 0)
		{
			return;
		}
		SQL_FetchRow(hndl);
		g_iPlayerID[client] = SQL_FetchInt(hndl, 0) + 1;
		new String:query[256];
		new String:auth[32];
		GetClientAuthString(client, auth, sizeof(auth));
		Format(query, sizeof(query), "INSERT INTO `war3_favrace_players`(`player_id`, `player_steam`) VALUES('%d', '%s');", g_iPlayerID[client], auth);
		SQL_TQuery(g_hDatabase, SQLCallback_Void, query, sizeof(query));
	}
}
public SQLCallback_LookupPlayer(Handle:db, Handle:hndl, const String:error[], any:userid)
{
	if(hndl == INVALID_HANDLE)
	{
		LogError("Error looking up player. %s.", error);
	}
	else
	{
		new client = GetClientOfUserId(userid);
		if(client == 0)
		{
			return;
		}
		new String:name[16];
		for(new i = 0; i < SQL_GetRowCount(hndl); i++)
		{
			SQL_FetchRow(hndl);
			SQL_FetchString(hndl, 0, name, sizeof(name));
			PushArrayString(g_hFavRaces[client], name);
		}
	}
}
public OnWar3Event(W3EVENT:event, client)
{
	if(event == DatabaseConnected)
	{
		g_hDatabase = W3GetVar(hDatabase);
		new String:query[512];
		Format(query, sizeof(query), "CREATE  TABLE IF NOT EXISTS `war3_favrace_players` ( \
			`player_id` INT UNSIGNED NOT NULL , \
			`player_steam` VARCHAR(32) NULL , \
			PRIMARY KEY (`player_id`) \
			UNIQUE (`player_steam`));" \
			);
		SQL_TQuery(g_hDatabase, SQLCallback_CreatePlayerTable, query);
	}
}
public SQLCallback_CreatePlayerTable(Handle:db, Handle:hndl, const String:error[], any:data) 
{
	if (hndl == INVALID_HANDLE)
	{
		LogError("Error creating player table. %s.", error);
	} 
	else
	{
		new String:query[512];
		Format(query, sizeof(query), "CREATE TABLE IF NOT EXISTS `war3_favrace_races` ( \
			`player_id` INT NOT NULL , \
			`race_name` VARCHAR(16) NULL , \
			PRIMARY KEY (`race_name`, `player_id`) );"
			);
		SQL_TQuery(g_hDatabase, SQLCallback_CreateRaceTable, query);
	}
}
public SQLCallback_CreateRaceTable(Handle:db, Handle:hndl, const String:error[], any:data) 
{
	if (hndl == INVALID_HANDLE)
	{
		LogError("Error creating race table. %s.", error);
	}
}





